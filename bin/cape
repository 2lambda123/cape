#!/usr/bin/env python

# System
import os, sys
# Import the full module
import cape
# Automated report generation
import cape.report
# Input parsing
from cape.argread import readflagstar

# Import docstring (makes the docstring available to module import)
import pc_doc
__doc__ = pc_doc.__doc__
    
# Check if run as a script.
if __name__ == "__main__":
    # Parse inputs.
    a, kw = readflagstar(sys.argv)
    
    # Check for a help flag.
    if kw.get('h') or kw.get('help'):
        # Import string processing
        import cape.text
        # Print marked-down docstring
        print(cape.text.markdown(__doc__))
        # Exit
        sys.exit()
    
    # Get constraints and convert text to list.
    cons  = kw.get('cons',        '').split(',')
    cons += kw.get('constraints', '').split(',')
    # Set the constraints back into the keywords.
    kw['cons'] = [con.strip() for con in cons]
        
    # Get file name.
    fname = kw.get('f', 'cape.json')
    
    # Try to read it.
    cntl = cape.Cntl(fname)
    
    # Process index list.
    if ('I' in kw) and (kw['I'] != True):
        # Turn into a single list
        kw['I'] = cntl.x.ExpandIndices(kw['I'])
        
    # Process inputs.
    if kw.get('c'):
        # Display status.
        cntl.DisplayStatus(**kw)
    elif kw.get('batch'):
        # Process a batch job
        cntl.SubmitBatchPBS(pyCart.os.sys.argv)
    elif kw.get('aero'):
        # Check for component.
        if kw['aero'] != True:
            # Process requested component
            kw['comp'] = kw['aero']
        # Collect force and moment data.
        cntl.Aero(**kw)
    elif kw.get('pt'):
        # Update point sensor(s) data book
        cntl.UpdatePointSensor(**kw)
    elif kw.get('ll'):
        # Update line load data book
        cntl.UpdateLineLoad(**kw)
    elif kw.get('a'):
        # Archive folders
        cntl.TarAdapt(**kw)
        cntl.TarViz(**kw)
    elif kw.get('expand'):
        # Archive folders
        cntl.UntarAdapt(**kw)
    elif kw.get('archive'):
        # Archive cases
        cntl.ArchiveCases(**kw)
    elif kw.get('unarchive'):
        # Unarchive cases
        cntl.UnarchiveCases(**kw)
    elif kw.get('clean'):
        # Clean up cases
        cntl.CleanCases(**kw)
    elif kw.get('explode'):
        # Break out each named component.
        cntl.ExplodeTri()
    elif kw.get('report'):
        # Get the report(s) to create.
        if kw['report'] == True:
            # All reports
            reps = [cntl.opts.get_ReportList()[0]]
        else:
            # User-specified report
            reps = [kw['report']]
        # Loop through reports.
        for rep in reps:
            # Get the report.
            R = cape.report.Report(cntl, rep)
            # Update according to other options
            R.UpdateReport(**kw)
    else:
        # Do it.
        cntl.SubmitJobs(**kw)
    
