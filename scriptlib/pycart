#!/usr/bin/env python
"""
Python interface for Cart3D: :file:`pycart`
===========================================

This function provides a master interface for pyCart.  All of the functionality
from this script is also accessible from the :mod:`pyCart` module using
relatively simple commands.

:Usage:
    .. code-block:: bash
    
        $ pycart [options]
        
:Examples:
    
    The basic call submits all jobs prescribed in the file :file:`pyCart.json`
    
        .. code-block:: bash
            
            $ pycart
            
    This command uses the inputs from :file:`poweron.json` and only displays
    statuses.  No jobs are submitted.
    
        .. code-block:: bash
        
            $ pycart -f poweron.json -c
            
    This command submits at most 5 jobs, but only cases with "Mach" greater
    than 1.5 and "alpha" equal to 0.0 are considered as candidates.
    
        .. code-block:: bash
        
            $ pycart -n 5 --cons "Mach>0.5, alpha==0.0"
    
:Options:

    -h, --help
        Display this help message and quit
        
    -c
        Check status and don't submit new jobs
    
    -j
        Show the PBS job numbers as well
        
    -f FNAME
        Use pyCart input file *FNAME* (defaults to 'pyCart.json')
        
    -p [COMP]
        Create multi-page PDF plots according to settings in *FNAME*.  If 
        *COMP* is specified, only that component is plotted

    -n NJOB
        Submit at most *NJOB* PBS scripts (defaults to unlimited)
        
    -q QUEUE
        Submit to a specific queue (defaults to "sls_aero1")
        
    --cons CONS
        Only consider cases that pass a list of inequalities separated by
        commas.  Constraints must use variable names (not abbreviations) from
        the trajectory described in *FNAME*.
        
    -I INDS
        Specify a list of cases to consider directly by index
        
    --plot
        Plot sweeps of data book
        
    --report FREP
        Update report named *FREP* or all reports if *FREP* is not specified
        
    --aero
        Loop through cases and extract force and moment coefficients and
        statistics for components described in the "Plot" section of *FNAME*
        
    --apply
        Apply the settings in *FNAME* to all cases; way to quickly change
        settings for a set of runs

    -a
        Archive folders according to settings in "Management" section of
        *FNAME*

    --expand
        Unarchive :file:`adapt??.tar` files in run folders

:Versions:
    * 2014-10-03 ``@ddalle``: Started
    * 2014-10-06 ``@ddalle``: First version
    * 2014-12-11 ``@ddalle``: Version 2.0 with constraints, plot, and F&M
"""

# Import the full module
import pyCart
# Automated report generation
import pyCart.report
# Input parsing
from pyCart.argread import readflagstar
    
# Check if run as a script.
if __name__ == "__main__":
    # Parse inputs.
    a, kw = readflagstar(pyCart.os.sys.argv)
    
    # Check for a help flag.
    if kw.get('h') or kw.get('help'):
        print(__doc__)
        pyCart.os.sys.exit()
    
    # Get constraints and convert text to list.
    cons  = kw.get('cons',        '').split(',')
    cons += kw.get('constraints', '').split(',')
    # Set the constraints back into the keywords.
    kw['cons'] = cons
        
    # Get file name.
    fname = kw.get('f', 'pyCart.json')
    
    # Try to read it.
    cart3d = pyCart.Cart3d(fname)
    
    # Process index list.
    if ('I' in kw) and (kw['I'] != True):
        # Turn into a single list
        kw['I'] = cart3d.x.ExpandIndices(kw['I'])
    
    # Process inputs.
    if kw.get('c'):
        # Display status.
        cart3d.DisplayStatus(**kw)
    elif kw.get('plot'):
        # Update data book plots.
        cart3d.PlotDataBook()
    elif kw.get('p'):
        # Check for component.
        if kw['p'] != True:
            # Plot requested component.
            kw['comp'] = kw['p']
        # Plot with default options
        cart3d.Plot(**kw)
    elif kw.get('aero'):
        # Check for component.
        if kw['aero'] != True:
            # Process requested component
            kw['comp'] = kw['aero']
        # Collect force and moment data.
        cart3d.Aero(**kw)
    elif kw.get('a'):
        # Archive folders
        cart3d.TarAdapt(**kw)
        cart3d.TarViz(**kw)
    elif kw.get('expand'):
        # Archive folders
        cart3d.UntarAdapt(**kw)
    elif kw.get('archive'):
        # Archive cases
        cart3d.ArchiveCases(**kw)
    elif kw.get('apply'):
        # Apply JSON settings
        cart3d.ApplyFlowCartSettings(**kw)
    elif kw.get('explode'):
        # Break out each named component.
        cart3d.ExplodeTri()
    elif kw.get('report'):
        # Get the report(s) to create.
        if kw['report'] == True:
            # All reports
            reps = cart3d.opts.get_ReportList()
        else:
            # User-specified report
            reps = [kw['report']]
        # Loop through reports.
        for rep in reps:
            # Get the report.
            R = pyCart.report.Report(cart3d, rep)
            # Update according to other options
            R.UpdateCases(**kw)
    else:
        # Do it.
        cart3d.SubmitJobs(**kw)
    
